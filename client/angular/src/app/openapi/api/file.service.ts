/*
EasyShare - a module of CIRCABC
Copyright (C) 2019 European Commission

This file is part of the "EasyShare" project.

This code is publicly distributed under the terms of EUPL-V1.2 license,
available at root of the project or at https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12.
*/
/**
 * EasyShare
 * This is a API definition for the EasyShare service.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { FileInfoUploader } from '../model/fileInfoUploader';
import { FileRequest } from '../model/fileRequest';
import { Recipient } from '../model/recipient';
import { RecipientWithLink } from '../model/recipientWithLink';
import { Status } from '../model/status';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class FileService {

    protected basePath = 'http://localhost:8888';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Used by INTERNAL users and ADMIN in order to delete a file
     * @param fileID The id of the file
     * @param reason Reason for deletion of the file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFile(fileID: string, reason?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteFile(fileID: string, reason?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteFile(fileID: string, reason?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteFile(fileID: string, reason?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileID === null || fileID === undefined) {
            throw new Error('Required parameter fileID was null or undefined when calling deleteFile.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (reason !== undefined && reason !== null) {
            queryParameters = queryParameters.set('reason', <any>reason);
        }

        let headers = this.defaultHeaders;

        // authentication (openId) required
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.configuration.basePath}/file/${encodeURIComponent(String(fileID))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Used by INTERNAL users in order to delete a share link for one of the shared users
     * @param fileID The id of the file
     * @param userID The id of the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFileSharedWithUser(fileID: string, userID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteFileSharedWithUser(fileID: string, userID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteFileSharedWithUser(fileID: string, userID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteFileSharedWithUser(fileID: string, userID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileID === null || fileID === undefined) {
            throw new Error('Required parameter fileID was null or undefined when calling deleteFileSharedWithUser.');
        }
        if (userID === null || userID === undefined) {
            throw new Error('Required parameter userID was null or undefined when calling deleteFileSharedWithUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (openId) required
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.configuration.basePath}/file/${encodeURIComponent(String(fileID))}/fileRequest/sharedWith/${encodeURIComponent(String(userID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Used by INTERNAL and EXTERNAL users to download a shared file
     * @param fileID The id of the file
     * @param password Password of the file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFile(fileID: string, password?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getFile(fileID: string, password?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getFile(fileID: string, password?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getFile(fileID: string, password?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileID === null || fileID === undefined) {
            throw new Error('Required parameter fileID was null or undefined when calling getFile.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/file/${encodeURIComponent(String(fileID))}`,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Used by INTERNAL users in order to post the file content on the pre-reserved file space
     * @param fileID The id of the file
     * @param body The file bytes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postFileContent(fileID: string, body?: Blob, observe?: 'body', reportProgress?: boolean): Observable<FileInfoUploader>;
    public postFileContent(fileID: string, body?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileInfoUploader>>;
    public postFileContent(fileID: string, body?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileInfoUploader>>;
    public postFileContent(fileID: string, body?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileID === null || fileID === undefined) {
            throw new Error('Required parameter fileID was null or undefined when calling postFileContent.');
        }

        let headers = this.defaultHeaders;

        // authentication (openId) required
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/octet-stream'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<FileInfoUploader>(`${this.configuration.basePath}/file/${encodeURIComponent(String(fileID))}/fileRequest/fileContent`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Used by INTERNAL users in order to request the reservation of space for a file
     * @param fileRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postFileFileRequest(fileRequest: FileRequest, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public postFileFileRequest(fileRequest: FileRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public postFileFileRequest(fileRequest: FileRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public postFileFileRequest(fileRequest: FileRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileRequest === null || fileRequest === undefined) {
            throw new Error('Required parameter fileRequest was null or undefined when calling postFileFileRequest.');
        }

        let headers = this.defaultHeaders;

        // authentication (openId) required
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            //'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.configuration.basePath}/file/fileRequest`,
            fileRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                responseType: 'text'
            }
        );
    }

    /**
     * Used by INTERNAL users in order to add a person to the list of shared, after having uploaded the file a first time. Will send an email if required
     * @param fileID The id of the file
     * @param recipient The userID or email of user to share the file with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postFileSharedWith(fileID: string, recipient: Recipient, observe?: 'body', reportProgress?: boolean): Observable<RecipientWithLink>;
    public postFileSharedWith(fileID: string, recipient: Recipient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RecipientWithLink>>;
    public postFileSharedWith(fileID: string, recipient: Recipient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RecipientWithLink>>;
    public postFileSharedWith(fileID: string, recipient: Recipient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileID === null || fileID === undefined) {
            throw new Error('Required parameter fileID was null or undefined when calling postFileSharedWith.');
        }
        if (recipient === null || recipient === undefined) {
            throw new Error('Required parameter recipient was null or undefined when calling postFileSharedWith.');
        }

        let headers = this.defaultHeaders;

        // authentication (openId) required
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<RecipientWithLink>(`${this.configuration.basePath}/file/${encodeURIComponent(String(fileID))}/fileRequest/sharedWith`,
            recipient,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
