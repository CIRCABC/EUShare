/*
CIRCABC Share - a module of CIRCABC
Copyright (C) 2019 European Commission

This file is part of the "CIRCABC Share" project.

This code is publicly distributed under the terms of EUPL-V1.2 license,
available at root of the project or at https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12.
*/
/**
 * EU Captcha Rest API
 * API for use of EU Captcha
 *
 * The version of the OpenAPI document: 1.0
 * Contact: DIGIT-EU-CAPTCHA@ec.europa.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { CaptchaResultDto } from '../model/captchaResultDto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class CaptchaControllerService {
  protected basePath = 'https://api.eucaptcha.eu:443';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (Array.isArray(basePath) && basePath.length > 0) {
        basePath = basePath[0];
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string,
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string,
  ): HttpParams {
    if (value === null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substring(0, 10),
          );
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Get a Captcha image
   * Returns a captcha image as per locale, captchaLength, type and capitalization or not
   * @param locale locale
   * @param captchaLength captchaLength
   * @param captchaType captchaType
   * @param capitalized capitalized
   * @param degree degree
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCaptchaImageUsingGET(
    locale?: string,
    captchaLength?: number,
    captchaType?: string,
    capitalized?: boolean,
    degree?: number,
    userId?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<CaptchaResultDto>;
  public getCaptchaImageUsingGET(
    locale?: string,
    captchaLength?: number,
    captchaType?: string,
    capitalized?: boolean,
    degree?: number,
    userId?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpResponse<CaptchaResultDto>>;
  public getCaptchaImageUsingGET(
    locale?: string,
    captchaLength?: number,
    captchaType?: string,
    capitalized?: boolean,
    degree?: number,
    userId?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpEvent<CaptchaResultDto>>;
  public getCaptchaImageUsingGET(
    locale?: string,
    captchaLength?: number,
    captchaType?: string,
    capitalized?: boolean,
    degree?: number,
    userId?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (locale !== undefined && locale !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>locale,
        'locale',
      );
    }
    if (captchaLength !== undefined && captchaLength !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>captchaLength,
        'captchaLength',
      );
    }
    if (captchaType !== undefined && captchaType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>captchaType,
        'captchaType',
      );
    }
    if (capitalized !== undefined && capitalized !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>capitalized,
        'capitalized',
      );
    }
    if (degree !== undefined && degree !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>degree,
        'degree',
      );
    }
    if (userId !== undefined && userId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>userId,
        'userId',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    const localVarPath = `/api/captchaImg`;
    return this.httpClient.request<CaptchaResultDto>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Refresh a previous Captcha image
   * Returns a new captcha image as per locale, captchaLength, type and capitalization or not
   * @param previousCaptchaId previousCaptchaId
   * @param locale locale
   * @param captchaLength captchaLength
   * @param captchaType captchaType
   * @param capitalized capitalized
   * @param degree degree
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public reloadCaptchaImageUsingGET(
    previousCaptchaId: string,
    locale?: string,
    captchaLength?: number,
    captchaType?: string,
    capitalized?: boolean,
    degree?: number,
    userId?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<CaptchaResultDto>;
  public reloadCaptchaImageUsingGET(
    previousCaptchaId: string,
    locale?: string,
    captchaLength?: number,
    captchaType?: string,
    capitalized?: boolean,
    degree?: number,
    userId?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpResponse<CaptchaResultDto>>;
  public reloadCaptchaImageUsingGET(
    previousCaptchaId: string,
    locale?: string,
    captchaLength?: number,
    captchaType?: string,
    capitalized?: boolean,
    degree?: number,
    userId?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpEvent<CaptchaResultDto>>;
  public reloadCaptchaImageUsingGET(
    previousCaptchaId: string,
    locale?: string,
    captchaLength?: number,
    captchaType?: string,
    capitalized?: boolean,
    degree?: number,
    userId?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<any> {
    if (previousCaptchaId === null || previousCaptchaId === undefined) {
      throw new Error(
        'Required parameter previousCaptchaId was null or undefined when calling reloadCaptchaImageUsingGET.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (locale !== undefined && locale !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>locale,
        'locale',
      );
    }
    if (captchaLength !== undefined && captchaLength !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>captchaLength,
        'captchaLength',
      );
    }
    if (captchaType !== undefined && captchaType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>captchaType,
        'captchaType',
      );
    }
    if (capitalized !== undefined && capitalized !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>capitalized,
        'capitalized',
      );
    }
    if (degree !== undefined && degree !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>degree,
        'degree',
      );
    }
    if (userId !== undefined && userId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>userId,
        'userId',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    const localVarPath = `/api/reloadCaptchaImg/${this.configuration.encodeParam(
      {
        name: 'previousCaptchaId',
        value: previousCaptchaId,
        in: 'path',
        style: 'simple',
        explode: false,
        dataType: 'string',
        dataFormat: undefined,
      },
    )}`;
    return this.httpClient.request<CaptchaResultDto>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Validate a Captcha image
   * Returns success or failed as an answer
   * @param xJwtString captcha token retrieved from get in header response
   * @param captchaId captchaId
   * @param captchaAnswer captchaAnswer
   * @param useAudio useAudio
   * @param captchaType captchaType
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public validateCaptchaUsingPOST(
    xJwtString: string,
    captchaId: string,
    captchaAnswer?: string,
    useAudio?: boolean,
    captchaType?: string,
    userId?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<string>;
  public validateCaptchaUsingPOST(
    xJwtString: string,
    captchaId: string,
    captchaAnswer?: string,
    useAudio?: boolean,
    captchaType?: string,
    userId?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpResponse<string>>;
  public validateCaptchaUsingPOST(
    xJwtString: string,
    captchaId: string,
    captchaAnswer?: string,
    useAudio?: boolean,
    captchaType?: string,
    userId?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpEvent<string>>;
  public validateCaptchaUsingPOST(
    xJwtString: string,
    captchaId: string,
    captchaAnswer?: string,
    useAudio?: boolean,
    captchaType?: string,
    userId?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<any> {
    if (xJwtString === null || xJwtString === undefined) {
      throw new Error(
        'Required parameter xJwtString was null or undefined when calling validateCaptchaUsingPOST.',
      );
    }
    if (captchaId === null || captchaId === undefined) {
      throw new Error(
        'Required parameter captchaId was null or undefined when calling validateCaptchaUsingPOST.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (captchaAnswer !== undefined && captchaAnswer !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>captchaAnswer,
        'captchaAnswer',
      );
    }
    if (useAudio !== undefined && useAudio !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>useAudio,
        'useAudio',
      );
    }
    if (captchaType !== undefined && captchaType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>captchaType,
        'captchaType',
      );
    }
    if (userId !== undefined && userId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>userId,
        'userId',
      );
    }

    let localVarHeaders = this.defaultHeaders;
    if (xJwtString !== undefined && xJwtString !== null) {
      localVarHeaders = localVarHeaders.set('x-jwtString', String(xJwtString));
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    const localVarPath = `/api/validateCaptcha/${this.configuration.encodeParam(
      {
        name: 'captchaId',
        value: captchaId,
        in: 'path',
        style: 'simple',
        explode: false,
        dataType: 'string',
        dataFormat: undefined,
      },
    )}`;
    return this.httpClient.request<string>(
      'post',
      `${this.configuration.basePath}${localVarPath}`,
      {
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
