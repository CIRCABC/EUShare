/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.europa.circabc.eushare.api;

import eu.europa.circabc.eushare.model.FileInfoUploader;
import eu.europa.circabc.eushare.model.FileRequest;
import eu.europa.circabc.eushare.model.Recipient;
import eu.europa.circabc.eushare.model.RecipientWithLink;
import eu.europa.circabc.eushare.model.Status;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "file", description = "the file API")
public interface FileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /file/{fileID}
     * Used by INTERNAL users and ADMIN in order to delete a file
     *
     * @param fileID The id of the file (required)
     * @param reason Reason for deletion of the file (optional)
     * @return SUCCESS Deletes the file content and its meta data, also sends an email to original uploader with the reason of deletion if the reason is given (status code 200)
     *         or UNAUTHORIZED the Error message will be empty (status code 401)
     *         or FORBIDDEN the Error message will be NotAuthorized (status code 403)
     *         or NOT FOUND the Error Message will be empty (status code 404)
     *         or INTERNAL SERVER ERROR the Error Message will be empty (status code 500)
     */
    @ApiOperation(value = "", nickname = "deleteFile", notes = "Used by INTERNAL users and ADMIN in order to delete a file", authorizations = {
         }, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS Deletes the file content and its meta data, also sends an email to original uploader with the reason of deletion if the reason is given"),
        @ApiResponse(code = 401, message = "UNAUTHORIZED the Error message will be empty", response = Status.class),
        @ApiResponse(code = 403, message = "FORBIDDEN the Error message will be NotAuthorized", response = Status.class),
        @ApiResponse(code = 404, message = "NOT FOUND the Error Message will be empty", response = Status.class),
        @ApiResponse(code = 500, message = "INTERNAL SERVER ERROR the Error Message will be empty", response = Status.class) })
    @DeleteMapping(
        value = "/file/{fileID}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteFile(@ApiParam(value = "The id of the file",required=true) @PathVariable("fileID") String fileID,@ApiParam(value = "Reason for deletion of the file") @Valid @RequestParam(value = "reason", required = false) String reason) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /file/{fileID}/fileRequest/sharedWith/{userID}
     * Used by INTERNAL users in order to delete a share link for one of the shared users
     *
     * @param fileID The id of the file (required)
     * @param userID The id of the user (required)
     * @return SUCCESS (status code 200)
     *         or UNAUTHORIZED the Error message will be empty (status code 401)
     *         or FORBIDDEN the Error message will be NotAuthorized (status code 403)
     *         or NOT FOUND the Error Message will be either FileNotFound or UserNotFound (status code 404)
     *         or INTERNAL SERVER ERROR the Error Message will be empty (status code 500)
     */
    @ApiOperation(value = "", nickname = "deleteFileSharedWithUser", notes = "Used by INTERNAL users in order to delete a share link for one of the shared users", authorizations = {
         }, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS"),
        @ApiResponse(code = 401, message = "UNAUTHORIZED the Error message will be empty", response = Status.class),
        @ApiResponse(code = 403, message = "FORBIDDEN the Error message will be NotAuthorized", response = Status.class),
        @ApiResponse(code = 404, message = "NOT FOUND the Error Message will be either FileNotFound or UserNotFound", response = Status.class),
        @ApiResponse(code = 500, message = "INTERNAL SERVER ERROR the Error Message will be empty", response = Status.class) })
    @DeleteMapping(
        value = "/file/{fileID}/fileRequest/sharedWith/{userID}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteFileSharedWithUser(@ApiParam(value = "The id of the file",required=true) @PathVariable("fileID") String fileID,@ApiParam(value = "The id of the user",required=true) @PathVariable("userID") String userID) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /file/{fileID}
     * Used by INTERNAL and EXTERNAL users to download a shared file
     *
     * @param fileID The id of the file (required)
     * @param password Password of the file (optional)
     * @return SUCCESS Returns the file and sends a mail to original uploader to inform him of the download (status code 200)
     *         or UNAUTHORIZED the Error message will be empty (status code 401)
     *         or NOT FOUND the Error Message will be empty (status code 404)
     *         or INTERNAL SERVER ERROR the Error Message will be empty (status code 500)
     */
    @ApiOperation(value = "", nickname = "getFile", notes = "Used by INTERNAL and EXTERNAL users to download a shared file", response = org.springframework.core.io.Resource.class, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS Returns the file and sends a mail to original uploader to inform him of the download", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "UNAUTHORIZED the Error message will be empty", response = Status.class),
        @ApiResponse(code = 404, message = "NOT FOUND the Error Message will be empty", response = Status.class),
        @ApiResponse(code = 500, message = "INTERNAL SERVER ERROR the Error Message will be empty", response = Status.class) })
    @GetMapping(
        value = "/file/{fileID}",
        produces = { "application/octet-stream", "application/json" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getFile(@ApiParam(value = "The id of the file",required=true) @PathVariable("fileID") String fileID,@ApiParam(value = "Password of the file") @Valid @RequestParam(value = "password", required = false) String password) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /file/{fileID}/fileRequest/fileContent
     * Used by INTERNAL users in order to post the file content on the pre-reserved file space
     *
     * @param fileID The id of the file (required)
     * @param file  (optional)
     * @return SUCCESS Returns the FileInfoUploader of the uploaded file (status code 200)
     *         or BAD REQUEST the Error Message will be empty (status code 400)
     *         or UNAUTHORIZED the Error message will be empty (status code 401)
     *         or FORBIDDEN the Error message will be NotAuthorized, FileLargerThanAllocation, IllegalFileSize (status code 403)
     *         or NOT FOUND the Error Message will be empty (status code 404)
     *         or INTERNAL SERVER ERROR the Error Message will be empty (status code 500)
     */
    @ApiOperation(value = "", nickname = "postFileContent", notes = "Used by INTERNAL users in order to post the file content on the pre-reserved file space", response = FileInfoUploader.class, authorizations = {
         }, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS Returns the FileInfoUploader of the uploaded file", response = FileInfoUploader.class),
        @ApiResponse(code = 400, message = "BAD REQUEST the Error Message will be empty", response = Status.class),
        @ApiResponse(code = 401, message = "UNAUTHORIZED the Error message will be empty", response = Status.class),
        @ApiResponse(code = 403, message = "FORBIDDEN the Error message will be NotAuthorized, FileLargerThanAllocation, IllegalFileSize", response = Status.class),
        @ApiResponse(code = 404, message = "NOT FOUND the Error Message will be empty", response = Status.class),
        @ApiResponse(code = 500, message = "INTERNAL SERVER ERROR the Error Message will be empty", response = Status.class) })
    @PostMapping(
        value = "/file/{fileID}/fileRequest/fileContent",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<FileInfoUploader> postFileContent(@ApiParam(value = "The id of the file",required=true) @PathVariable("fileID") String fileID,@ApiParam(value = "") @Valid @RequestPart(value = "file", required = false) MultipartFile file) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /file/fileRequest
     * Used by INTERNAL users in order to request the reservation of space for a file
     *
     * @param fileRequest  (required)
     * @return SUCCESS Returns the File ID of the newly-created file (status code 200)
     *         or BAD REQUEST the Error Message will be empty (status code 400)
     *         or UNAUTHORIZED the Error message will be empty (status code 401)
     *         or FORBIDDEN the Error message will be NotAuthorized, IllegalFileSize, DateLiesInPast, UserHasInsufficientSpace, EmptyFileName, WrongEmailStructure, WrongNameStructure, MessageTooLong (status code 403)
     *         or INTERNAL SERVER ERROR the Error Message will be empty (status code 500)
     */
    @ApiOperation(value = "", nickname = "postFileFileRequest", notes = "Used by INTERNAL users in order to request the reservation of space for a file", response = String.class, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS Returns the File ID of the newly-created file", response = String.class),
        @ApiResponse(code = 400, message = "BAD REQUEST the Error Message will be empty", response = Status.class),
        @ApiResponse(code = 401, message = "UNAUTHORIZED the Error message will be empty", response = Status.class),
        @ApiResponse(code = 403, message = "FORBIDDEN the Error message will be NotAuthorized, IllegalFileSize, DateLiesInPast, UserHasInsufficientSpace, EmptyFileName, WrongEmailStructure, WrongNameStructure, MessageTooLong", response = Status.class),
        @ApiResponse(code = 500, message = "INTERNAL SERVER ERROR the Error Message will be empty", response = Status.class) })
    @PostMapping(
        value = "/file/fileRequest",
        produces = { "text/plain", "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> postFileFileRequest(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FileRequest fileRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /file/{fileID}/fileRequest/sharedWith
     * Used by INTERNAL users in order to add a person to the list of shared, after having uploaded the file a first time. Will send an email if required
     *
     * @param fileID The id of the file (required)
     * @param recipient The userID or email of user to share the file with (required)
     * @return SUCCESS Returns the RecipientWithLink for the added recipient (status code 200)
     *         or BAD REQUEST the Error Message will be empty (status code 400)
     *         or UNAUTHORIZED the Error message will be empty (status code 401)
     *         or FORBIDDEN the Error message will be NotAuthorized, WrongEmailStructure, WrongNameStructure, MessageTooLong (status code 403)
     *         or NOT FOUND the Error Message will be empty (status code 404)
     *         or INTERNAL SERVER ERROR the Error Message will be empty (status code 500)
     */
    @ApiOperation(value = "", nickname = "postFileSharedWith", notes = "Used by INTERNAL users in order to add a person to the list of shared, after having uploaded the file a first time. Will send an email if required", response = RecipientWithLink.class, authorizations = {
         }, tags={ "File", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SUCCESS Returns the RecipientWithLink for the added recipient", response = RecipientWithLink.class),
        @ApiResponse(code = 400, message = "BAD REQUEST the Error Message will be empty", response = Status.class),
        @ApiResponse(code = 401, message = "UNAUTHORIZED the Error message will be empty", response = Status.class),
        @ApiResponse(code = 403, message = "FORBIDDEN the Error message will be NotAuthorized, WrongEmailStructure, WrongNameStructure, MessageTooLong", response = Status.class),
        @ApiResponse(code = 404, message = "NOT FOUND the Error Message will be empty", response = Status.class),
        @ApiResponse(code = 500, message = "INTERNAL SERVER ERROR the Error Message will be empty", response = Status.class) })
    @PostMapping(
        value = "/file/{fileID}/fileRequest/sharedWith",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<RecipientWithLink> postFileSharedWith(@ApiParam(value = "The id of the file",required=true) @PathVariable("fileID") String fileID,@ApiParam(value = "The userID or email of user to share the file with" ,required=true )  @Valid @RequestBody Recipient recipient) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
