/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.europa.circabc.eushare.api;

import eu.europa.circabc.eushare.model.AbuseReport;
import eu.europa.circabc.eushare.model.AbuseReportDetails;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "abuse", description = "the abuse API")
public interface AbuseApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /abuse : Create a new abuse report
     *
     * @param abuseReport  (required)
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Create a new abuse report", nickname = "createAbuseReport", notes = "", response = AbuseReport.class, tags={ "Abuse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = AbuseReport.class) })
    @PostMapping(
        value = "/abuse",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AbuseReport> createAbuseReport(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AbuseReport abuseReport) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"reason\" : \"reason\", \"description\" : \"description\", \"reporter\" : \"reporter\", \"ID\" : \"ID\", \"fileId\" : \"fileId\", \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /abuse/{id} : Delete a specific abuse report by ID
     *
     * @param id  (required)
     * @return No Content (status code 204)
     */
    @ApiOperation(value = "Delete a specific abuse report by ID", nickname = "deleteAbuseReport", notes = "", tags={ "Abuse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @DeleteMapping(
        value = "/abuse/{id}"
    )
    default ResponseEntity<Void> deleteAbuseReport(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /abuse/{id} : Get a specific abuse report by ID.
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get a specific abuse report by ID.", nickname = "getAbuseReport", notes = "", response = AbuseReport.class, tags={ "Abuse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AbuseReport.class) })
    @GetMapping(
        value = "/abuse/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<AbuseReport> getAbuseReport(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"reason\" : \"reason\", \"description\" : \"description\", \"reporter\" : \"reporter\", \"ID\" : \"ID\", \"fileId\" : \"fileId\", \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /abuse : Get a list of abuse reports with details
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get a list of abuse reports with details", nickname = "getAbuseReportList", notes = "", response = AbuseReportDetails.class, responseContainer = "List", tags={ "Abuse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AbuseReportDetails.class, responseContainer = "List") })
    @GetMapping(
        value = "/abuse",
        produces = { "application/json" }
    )
    default ResponseEntity<List<AbuseReportDetails>> getAbuseReportList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /abuse/{id} : Update a specific abuse report by ID
     *
     * @param id  (required)
     * @param abuseReport  (required)
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Update a specific abuse report by ID", nickname = "updateAbuseReport", notes = "", response = AbuseReport.class, tags={ "Abuse", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = AbuseReport.class) })
    @PutMapping(
        value = "/abuse/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AbuseReport> updateAbuseReport(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody AbuseReport abuseReport) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"reason\" : \"reason\", \"description\" : \"description\", \"reporter\" : \"reporter\", \"ID\" : \"ID\", \"fileId\" : \"fileId\", \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
