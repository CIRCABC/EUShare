/*
 * EUShare - a module of CIRCABC
 * Copyright (C) 2019-2021 European Commission
 *
 * This file is part of the "EUShare" project.
 *
 * This code is publicly distributed under the terms of EUPL-V1.2 license,
 * available at root of the project or at https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12.
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.europa.circabc.eushare.api;

import eu.europa.circabc.eushare.model.TrustRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "trust", description = "the trust API")
public interface TrustApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /trust/{id} : Approve Trust Request
     *
     * @param id  (required)
     * @param approved  (required)
     * @param reason  (optional)
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Approve Trust Request", nickname = "approveTrustRequest", notes = "", response = TrustRequest.class, tags={ "Trust", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = TrustRequest.class) })
    @PutMapping(
        value = "/trust/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TrustRequest> approveTrustRequest(@ApiParam(value = "",required=true) @PathVariable("id") String id,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "approved", required = true) Boolean approved,@ApiParam(value = "") @Valid @RequestParam(value = "reason", required = false) String reason) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approved\" : true, \"requestDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /trust/{id} : Delete Trust Request
     *
     * @param id  (required)
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Delete Trust Request", nickname = "deleteTrustRequest", notes = "", response = TrustRequest.class, tags={ "Trust", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = TrustRequest.class) })
    @DeleteMapping(
        value = "/trust/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TrustRequest> deleteTrustRequest(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approved\" : true, \"requestDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /trust : Get Trust Request List
     *
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Get Trust Request List", nickname = "getTrustRequestList", notes = "", response = TrustRequest.class, responseContainer = "List", tags={ "Trust", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = TrustRequest.class, responseContainer = "List") })
    @GetMapping(
        value = "/trust",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TrustRequest>> getTrustRequestList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approved\" : true, \"requestDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /trust : Send Trust Request
     *
     * @param trustRequest  (required)
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Send Trust Request", nickname = "sendTrustRequest", notes = "", response = TrustRequest.class, tags={ "Trust", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = TrustRequest.class) })
    @PostMapping(
        value = "/trust",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TrustRequest> sendTrustRequest(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TrustRequest trustRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approved\" : true, \"requestDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
