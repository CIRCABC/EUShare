/*
 * EUShare - a module of CIRCABC
 * Copyright (C) 2019-2021 European Commission
 *
 * This file is part of the "EUShare" project.
 *
 * This code is publicly distributed under the terms of EUPL-V1.2 license,
 * available at root of the project or at https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12.
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.europa.circabc.eushare.api;

import eu.europa.circabc.eushare.model.Monitoring;
import eu.europa.circabc.eushare.model.MonitoringDetails;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "monitoring", description = "the monitoring API")
public interface MonitoringApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /monitoring/{id} : Delete a specific monitoring entry by ID
     *
     * @param id  (required)
     * @return No Content (status code 204)
     */
    @ApiOperation(value = "Delete a specific monitoring entry by ID", nickname = "deleteMonitoringEntry", notes = "", tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @DeleteMapping(
        value = "/monitoring/{id}"
    )
    default ResponseEntity<Void> deleteMonitoringEntry(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /monitoring/{id} : Get a specific monitoring entry by ID.
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get a specific monitoring entry by ID.", nickname = "getMonitoringEntry", notes = "", response = Monitoring.class, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Monitoring.class) })
    @GetMapping(
        value = "/monitoring/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Monitoring> getMonitoringEntry(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"datetime\" : \"datetime\", \"ID\" : \"ID\", \"counter\" : 0, \"event\" : \"DOWNLOAD_RATE_HOUR\", \"userId\" : \"userId\", \"fileId\" : \"fileId\", \"status\" : \"WAITING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /monitoring : Get a list of monitoring entries with details grouped by fileId
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get a list of monitoring entries with details grouped by fileId", nickname = "getMonitoringEntryList", notes = "", response = MonitoringDetails.class, responseContainer = "List", tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MonitoringDetails.class, responseContainer = "List") })
    @GetMapping(
        value = "/monitoring",
        produces = { "application/json" }
    )
    default ResponseEntity<List<MonitoringDetails>> getMonitoringEntryList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /monitoring/{id} : Update a specific monitoring entry by ID
     *
     * @param id  (required)
     * @param monitoringDetails  (required)
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Update a specific monitoring entry by ID", nickname = "updateMonitoringEntry", notes = "", response = MonitoringDetails.class, tags={ "Monitoring", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = MonitoringDetails.class) })
    @PutMapping(
        value = "/monitoring/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<MonitoringDetails> updateMonitoringEntry(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody MonitoringDetails monitoringDetails) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
