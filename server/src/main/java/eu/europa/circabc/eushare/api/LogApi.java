/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.europa.circabc.eushare.api;

import eu.europa.circabc.eushare.model.LastDownload;
import eu.europa.circabc.eushare.model.LastLog;
import eu.europa.circabc.eushare.model.LastUpload;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "log", description = "the log API")
public interface LogApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /log/getLastDownloads : Retrieve the last downloads ordered by download date
     *
     * @return A list of last downloads (status code 200)
     */
    @ApiOperation(value = "Retrieve the last downloads ordered by download date", nickname = "logGetLastDownloadsGet", notes = "", response = LastDownload.class, responseContainer = "List", tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of last downloads", response = LastDownload.class, responseContainer = "List") })
    @GetMapping(
        value = "/log/getLastDownloads",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LastDownload>> logGetLastDownloadsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"password\" : \"password\", \"filename\" : \"filename\", \"shorturl\" : \"shorturl\", \"download_notification\" : true, \"recipient\" : \"recipient\", \"download_date\" : \"2000-01-23T04:56:07.000+00:00\", \"uploader_email\" : \"uploader_email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getLastLogs : Retrieve the last logs for users with username
     *
     * @return A list of last logs (status code 200)
     */
    @ApiOperation(value = "Retrieve the last logs for users with username", nickname = "logGetLastLogsGet", notes = "", response = LastLog.class, responseContainer = "List", tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of last logs", response = LastLog.class, responseContainer = "List") })
    @GetMapping(
        value = "/log/getLastLogs",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LastLog>> logGetLastLogsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"last_logged\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"total_space\" : 0, \"id\" : \"id\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getLastUploads : Retrieve the last uploads for users with username
     *
     * @return A list of last uploads (status code 200)
     */
    @ApiOperation(value = "Retrieve the last uploads for users with username", nickname = "logGetLastUploadsGet", notes = "", response = LastUpload.class, responseContainer = "List", tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of last uploads", response = LastUpload.class, responseContainer = "List") })
    @GetMapping(
        value = "/log/getLastUploads",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LastUpload>> logGetLastUploadsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"filename\" : \"filename\", \"shorturl\" : \"shorturl\", \"download_notification\" : true, \"share_email\" : \"share_email\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"uploader_email\" : \"uploader_email\", \"file_size\" : 0, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
