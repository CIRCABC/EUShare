/*
 * EUShare - a module of CIRCABC
 * Copyright (C) 2019-2021 European Commission
 *
 * This file is part of the "EUShare" project.
 *
 * This code is publicly distributed under the terms of EUPL-V1.2 license,
 * available at root of the project or at https://joinup.ec.europa.eu/collection/eupl/eupl-text-11-12.
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.europa.circabc.eushare.api;

import eu.europa.circabc.eushare.model.LastDownload;
import eu.europa.circabc.eushare.model.LastLogin;
import eu.europa.circabc.eushare.model.LastUpload;
import eu.europa.circabc.eushare.model.Metadata;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "log", description = "the log API")
public interface LogApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /log/getAllLastDownloads : Retrieve all the last downloads ordered by download date.
     *
     * @return A CSV file of all last downloads (status code 200)
     */
    @ApiOperation(value = "Retrieve all the last downloads ordered by download date.", nickname = "logGetAllLastDownloadsGet", notes = "", response = org.springframework.core.io.Resource.class, tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A CSV file of all last downloads", response = org.springframework.core.io.Resource.class) })
    @GetMapping(
        value = "/log/getAllLastDownloads",
        produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> logGetAllLastDownloadsGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getAllLastLogins : Retrieve all the last logins
     *
     * @return A CSV file of all last logins. (status code 200)
     */
    @ApiOperation(value = "Retrieve all the last logins", nickname = "logGetAllLastLoginsGet", notes = "", response = org.springframework.core.io.Resource.class, tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A CSV file of all last logins.", response = org.springframework.core.io.Resource.class) })
    @GetMapping(
        value = "/log/getAllLastLogins",
        produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> logGetAllLastLoginsGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getAllLastUploads : Retrieve all the last uploads
     *
     * @return A CSV file of all last uploads (status code 200)
     */
    @ApiOperation(value = "Retrieve all the last uploads", nickname = "logGetAllLastUploadsGet", notes = "", response = org.springframework.core.io.Resource.class, tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A CSV file of all last uploads", response = org.springframework.core.io.Resource.class) })
    @GetMapping(
        value = "/log/getAllLastUploads",
        produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> logGetAllLastUploadsGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getLastDownloads : Retrieve the last downloads ordered by download date
     *
     * @param pageSize Number of logs returned (required)
     * @param pageNumber Page number (required)
     * @param sortField Field by which the downloads will be sorted (optional)
     * @param sortOrder Order in which downloads will be sorted (ASC/DESC) (optional)
     * @return A list of last downloads (status code 200)
     */
    @ApiOperation(value = "Retrieve the last downloads ordered by download date", nickname = "logGetLastDownloadsGet", notes = "", response = LastDownload.class, responseContainer = "List", tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of last downloads", response = LastDownload.class, responseContainer = "List") })
    @GetMapping(
        value = "/log/getLastDownloads",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LastDownload>> logGetLastDownloadsGet(@NotNull @ApiParam(value = "Number of logs returned", required = true) @Valid @RequestParam(value = "pageSize", required = true) Integer pageSize,@NotNull @ApiParam(value = "Page number", required = true) @Valid @RequestParam(value = "pageNumber", required = true) Integer pageNumber,@ApiParam(value = "Field by which the downloads will be sorted") @Valid @RequestParam(value = "sortField", required = false) String sortField,@ApiParam(value = "Order in which downloads will be sorted (ASC/DESC)", allowableValues = "ASC, DESC") @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"password\" : \"password\", \"filename\" : \"filename\", \"shorturl\" : \"shorturl\", \"download_notification\" : true, \"recipient\" : \"recipient\", \"download_date\" : \"2000-01-23T04:56:07.000+00:00\", \"uploader_email\" : \"uploader_email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getLastDownloadsMetadata : Retrieve the total count of last downloads
     *
     * @return Metadata for last downloads (status code 200)
     */
    @ApiOperation(value = "Retrieve the total count of last downloads", nickname = "logGetLastDownloadsMetadataGet", notes = "", response = Metadata.class, tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Metadata for last downloads", response = Metadata.class) })
    @GetMapping(
        value = "/log/getLastDownloadsMetadata",
        produces = { "application/json" }
    )
    default ResponseEntity<Metadata> logGetLastDownloadsMetadataGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getLastLogins : Retrieve the last logins
     *
     * @param pageSize Number of logins returned (required)
     * @param pageNumber Page number (required)
     * @param sortField Field by which the logins will be sorted (optional)
     * @param sortOrder Order in which logins will be sorted (ASC/DESC) (optional)
     * @return A list of last logins (status code 200)
     */
    @ApiOperation(value = "Retrieve the last logins", nickname = "logGetLastLoginsGet", notes = "", response = LastLogin.class, responseContainer = "List", tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of last logins", response = LastLogin.class, responseContainer = "List") })
    @GetMapping(
        value = "/log/getLastLogins",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LastLogin>> logGetLastLoginsGet(@NotNull @ApiParam(value = "Number of logins returned", required = true) @Valid @RequestParam(value = "pageSize", required = true) Integer pageSize,@NotNull @ApiParam(value = "Page number", required = true) @Valid @RequestParam(value = "pageNumber", required = true) Integer pageNumber,@ApiParam(value = "Field by which the logins will be sorted") @Valid @RequestParam(value = "sortField", required = false) String sortField,@ApiParam(value = "Order in which logins will be sorted (ASC/DESC)", allowableValues = "ASC, DESC") @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"last_logged\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"total_space\" : 0, \"id\" : \"id\", \"creation_date\" : \"2000-01-23T04:56:07.000+00:00\", \"email\" : \"email\", \"username\" : \"username\", \"uploads\" : 6, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getLastLoginsMetadata : Retrieve the total count of last logins.
     *
     * @return Metadata for last logins (status code 200)
     */
    @ApiOperation(value = "Retrieve the total count of last logins.", nickname = "logGetLastLoginsMetadataGet", notes = "", response = Metadata.class, tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Metadata for last logins", response = Metadata.class) })
    @GetMapping(
        value = "/log/getLastLoginsMetadata",
        produces = { "application/json" }
    )
    default ResponseEntity<Metadata> logGetLastLoginsMetadataGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getLastUploads : Retrieve the last uploads
     *
     * @param pageSize Number of logs returned (required)
     * @param pageNumber Page number (required)
     * @param sortField Field by which the uploads will be sorted (optional)
     * @param sortOrder Order in which uploads will be sorted (ASC/DESC) (optional)
     * @return A list of last uploads (status code 200)
     */
    @ApiOperation(value = "Retrieve the last uploads", nickname = "logGetLastUploadsGet", notes = "", response = LastUpload.class, responseContainer = "List", tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of last uploads", response = LastUpload.class, responseContainer = "List") })
    @GetMapping(
        value = "/log/getLastUploads",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LastUpload>> logGetLastUploadsGet(@NotNull @ApiParam(value = "Number of logs returned", required = true) @Valid @RequestParam(value = "pageSize", required = true) Integer pageSize,@NotNull @ApiParam(value = "Page number", required = true) @Valid @RequestParam(value = "pageNumber", required = true) Integer pageNumber,@ApiParam(value = "Field by which the uploads will be sorted") @Valid @RequestParam(value = "sortField", required = false) String sortField,@ApiParam(value = "Order in which uploads will be sorted (ASC/DESC)", allowableValues = "ASC, DESC") @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"filename\" : \"filename\", \"shorturl\" : \"shorturl\", \"download_notification\" : true, \"share_email\" : \"share_email\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"uploader_email\" : \"uploader_email\", \"file_size\" : 0, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /log/getLastUploadsMetadata : Retrieve the total count of last uploads
     *
     * @return Metadata for last uploads (status code 200)
     */
    @ApiOperation(value = "Retrieve the total count of last uploads", nickname = "logGetLastUploadsMetadataGet", notes = "", response = Metadata.class, tags={ "log", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Metadata for last uploads", response = Metadata.class) })
    @GetMapping(
        value = "/log/getLastUploadsMetadata",
        produces = { "application/json" }
    )
    default ResponseEntity<Metadata> logGetLastUploadsMetadataGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
